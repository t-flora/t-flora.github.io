---
// Fun Mode component with fireworks effect
---

<div id="fun-mode-container">
	<!-- Fun Mode Toggle Button -->
	<button
		id="fun-mode-toggle"
		class="fixed bottom-4 right-4 z-50 w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white rounded-full shadow-lg transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2"
		title="Toggle Fun Mode"
		aria-label="Toggle Fun Mode"
	>
		<span class="text-xl">ðŸŽ†</span>
	</button>
	
	<!-- Fireworks Canvas -->
	<canvas
		id="fireworks-canvas"
		class="fixed inset-0 z-40 pointer-events-none hidden"
		style="mix-blend-mode: screen;"
	></canvas>
</div>

<style>
	#fun-mode-toggle {
		animation: pulse 2s infinite;
	}
	
	#fun-mode-toggle.active {
		background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #ffeaa7);
		background-size: 300% 300%;
		animation: rainbow 1s linear infinite, pulse 2s infinite;
	}
	
	@keyframes pulse {
		0%, 100% {
			box-shadow: 0 0 0 0 rgba(147, 51, 234, 0.7);
		}
		50% {
			box-shadow: 0 0 0 10px rgba(147, 51, 234, 0);
		}
	}
	
	@keyframes rainbow {
		0% { background-position: 0% 50%; }
		50% { background-position: 100% 50%; }
		100% { background-position: 0% 50%; }
	}
</style>

<script>
	class FunMode {
		private canvas: HTMLCanvasElement;
		private ctx: CanvasRenderingContext2D;
		private toggle: HTMLButtonElement;
		private isActive: boolean = false;
		private particles: Particle[] = [];
		private animationId: number | null = null;
		private readonly STORAGE_KEY = 'funMode';

		constructor() {
			this.canvas = document.getElementById('fireworks-canvas') as HTMLCanvasElement;
			this.ctx = this.canvas.getContext('2d')!;
			this.toggle = document.getElementById('fun-mode-toggle') as HTMLButtonElement;
			
			this.setupCanvas();
			this.bindEvents();
			this.loadFunModeState();
		}

		private setupCanvas() {
			this.resizeCanvas();
			window.addEventListener('resize', () => this.resizeCanvas());
		}

		private resizeCanvas() {
			this.canvas.width = window.innerWidth;
			this.canvas.height = window.innerHeight;
		}

		private bindEvents() {
			this.toggle.addEventListener('click', () => this.toggleFunMode());
			document.addEventListener('click', (e) => this.handleClick(e));
		}

		private toggleFunMode() {
			this.isActive = !this.isActive;
			this.saveFunModeState();
			this.updateFunModeUI();
		}

		private updateFunModeUI() {
			this.toggle.classList.toggle('active', this.isActive);
			
			if (this.isActive) {
				this.canvas.classList.remove('hidden');
				this.startAnimation();
			} else {
				this.canvas.classList.add('hidden');
				this.stopAnimation();
				this.particles = [];
				this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
			}
		}

		private loadFunModeState() {
			try {
				const savedState = localStorage.getItem(this.STORAGE_KEY);
				if (savedState !== null) {
					this.isActive = JSON.parse(savedState);
					this.updateFunModeUI();
				}
			} catch (error) {
				console.warn('Failed to load fun mode state:', error);
			}
		}

		private saveFunModeState() {
			try {
				localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.isActive));
			} catch (error) {
				console.warn('Failed to save fun mode state:', error);
			}
		}

		private handleClick(e: MouseEvent) {
			if (!this.isActive || e.target === this.toggle) return;
			
			this.createFirework(e.clientX, e.clientY);
		}

		private createFirework(x: number, y: number) {
			const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#fd79a8', '#fdcb6e', '#6c5ce7'];
			const particleCount = 15 + Math.random() * 15;
			
			for (let i = 0; i < particleCount; i++) {
				const angle = (Math.PI * 2 * i) / particleCount + Math.random() * 0.5;
				const velocity = 2 + Math.random() * 8;
				const color = colors[Math.floor(Math.random() * colors.length)];
				
				this.particles.push(new Particle(x, y, angle, velocity, color));
			}
		}

		private startAnimation() {
			if (this.animationId) return;
			this.animate();
		}

		private stopAnimation() {
			if (this.animationId) {
				cancelAnimationFrame(this.animationId);
				this.animationId = null;
			}
		}

		private animate = () => {
			this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
			this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

			for (let i = this.particles.length - 1; i >= 0; i--) {
				const particle = this.particles[i];
				particle.update();
				particle.draw(this.ctx);

				if (particle.life <= 0) {
					this.particles.splice(i, 1);
				}
			}

			this.animationId = requestAnimationFrame(this.animate);
		};
	}

	class Particle {
		public x: number;
		public y: number;
		public vx: number;
		public vy: number;
		public life: number;
		public maxLife: number;
		public color: string;
		public size: number;

		constructor(x: number, y: number, angle: number, velocity: number, color: string) {
			this.x = x;
			this.y = y;
			this.vx = Math.cos(angle) * velocity;
			this.vy = Math.sin(angle) * velocity;
			this.life = 1;
			this.maxLife = 60 + Math.random() * 40;
			this.color = color;
			this.size = 2 + Math.random() * 3;
		}

		update() {
			this.x += this.vx;
			this.y += this.vy;
			this.vy += 0.15; // gravity
			this.vx *= 0.98; // air resistance
			this.life -= 1 / this.maxLife;
		}

		draw(ctx: CanvasRenderingContext2D) {
			ctx.save();
			ctx.globalAlpha = this.life;
			ctx.fillStyle = this.color;
			ctx.shadowBlur = 10;
			ctx.shadowColor = this.color;
			ctx.beginPath();
			ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
			ctx.fill();
			ctx.restore();
		}
	}

	// Initialize Fun Mode when DOM is loaded
	document.addEventListener('DOMContentLoaded', () => {
		new FunMode();
	});
</script>